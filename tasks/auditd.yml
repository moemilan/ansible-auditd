---

- block:
    # https://github.com/lxc/lxd/issues/2004, only on xenial?
    - name: ensure auditd package is present
      package:
        name: "{{ auditd_pkg }}"
        state: present
        update_cache: yes
      register: pkg_result
      until: pkg_result is success

    - name: retrieve suid/sgid files list
      command: >
        find / ! \( -path {{ ' -prune -o -path '.join(auditd_sugid_ignored_paths) }} -prune \)
          -a -perm /u=s,g=s -type f
      register: sugid_files
      ignore_errors: true
      changed_when: false
      check_mode: no

    - name: Check if /etc/puppet/ssl exists
      stat:
        path: /etc/puppet/ssl
      register: etcpuppet

    - name: Check if /etc/chef exists
      stat:
        path: /etc/chef
      register: etcchef

    - name: Check if /opt/BESClient exists
      stat:
        path: /opt/BESClient
      register: BESClient

    - name: "create auditd rules {{ auditd_confdir }} directory"
      file:
        path: "{{ auditd_confdir }}"
        state: directory
        mode: '0750'

    - block:
        - name: list files in configuration dir
          command: "ls {{ auditd_confdir }}"
          failed_when: no
          changed_when: no
          check_mode: no
          register: confdir_files
          tags: files

        - name: Delete not managed files in configuration directory
          file:
            name: "{{ auditd_confdir }}/{{ item }}"
            state: absent
          loop: "{{ confdir_files.stdout_lines }}"
          when: item.replace('.rules','') not in auditd_rules_templates
          tags: files
      when: auditd_manage_configuration_directory

    - name: check is augenrules is present
      stat:
        path: "/sbin/augenrules"
      register: augenrules_file
      changed_when: false

    - name: set a fact for STIG Compliance
      set_fact:
        sec_compliance_rules: "{{ auditd_stig_rules_templates }}"
      when: auditd_security_compliance == 'stig'

    - name: set a fact for CIS Compliance
      set_fact:
        sec_compliance_rules: "{{ auditd_cis_rules_templates }}"
      when: auditd_security_compliance == 'cis'

    - name: configure audit system
      template:
        src: "{{ item }}.rules.j2"
        dest: "{{ auditd_confdir }}/{{ item }}.rules"
        mode: '0644'
        backup: "{{ auditd_backup | default(false) }}"
      with_items: "{{ auditd_rules_templates | union(sec_compliance_rules) }}"
      notify:
        - augenrules
        - restart auditd
        - restart auditd - rhel7
        - restart auditd - suse

    - name: configure privileged commands rule for STIG compliance
      include_tasks: auditd-stig-privileged-commands.yml
      when: auditd_security_compliance == "stig"

    # /sbin/augenrules isn't present to generate /etc/audit/audit.rules
    - name: assemble rules into a single file
      assemble:
        src: "{{ auditd_confdir }}"
        dest: /etc/audit/audit.rules
        mode: '0644'
      when: not augenrules_file.stat.exists

    # - name: Configure /etc/audit/auditd.conf
    #   lineinfile:
    #     dest: /etc/audit/auditd.conf
    #     regexp: "{{ item.re }}"
    #     line: "{{ item.l }}"
    #     mode: '0640'
    #   with_items: "{{ auditd_conf_lineinfile | default([]) }}"
    #   notify:
    #     - restart auditd
    #     - restart auditd - rhel7
    #     - restart auditd - suse

    - name: Configure /etc/audit/auditd.conf
      template:
        src: auditd.conf.j2
        dest: /etc/audit/auditd.conf
        mode: '0640'
      notify:
        - restart auditd
        - restart auditd - rhel7
        - restart auditd - suse
      when: enable_manage_auditd_conf

    - name: Configure PAM with TTY logging
      lineinfile:
        path: /etc/pam.d/password-auth-ac
        line: "session    required pam_tty_audit.so enable=*"
      when:
        - ansible_distribution == "RedHat" or ansible_distribution == "CentOS"
        - ansible_distribution_major_version >= "7"
        - enable_tty_logging

    - name: Check if grub is present
      stat:
        path: /etc/default/grub
      register: hasgrub
    - block:
        - name: check if auditing present in grub config
          command: "egrep '^GRUB_CMDLINE_LINUX=\".*audit=1.*\"' /etc/default/grub"
          changed_when: false
          register: auditgrub
          ignore_errors: true
          check_mode: no

        - name: Enable Auditing in grub for Processes That Start Prior to auditd - CIS
          replace:
            dest: /etc/default/grub
            regexp: '^GRUB_CMDLINE_LINUX="(.*)"'
            replace: 'GRUB_CMDLINE_LINUX="\1 audit=1"'
          when: not auditgrub.stdout
      when: hasgrub.stat is defined and hasgrub.stat.exists

    - name: Enable and start auditd
      service:
        name: auditd
        state: started
        enabled: yes

    - include: reporting.yml
      when: auditd_reporting

    - name: Set fact for monit
      set_fact:
        monit_auditd: true
  when:
    - not (ansible_virtualization_type is defined and
          (ansible_virtualization_type == "lxc" or ansible_virtualization_type == "docker")
        )
    - not osquery_process_auditing|bool
  tags: auditd

- block:
    - name: Disable auditd as osquery present with process auditing configured
      service:
        name: auditd
        state: stopped
        enabled: no
    - name: Set fact for monit
      set_fact:
        monit_auditd: false
  when: osquery_process_auditing|bool

- name: Debug | audisp_syslog_enable
  debug: var=audisp_syslog_enable
- include: rsyslog-audisp.yml
  when: audisp_syslog_enable|bool
